#!/bin/bash

set -e

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# install core and development Python dependencies into the currently activated venv
function install {
    python -m pip install --upgrade pip
    python -m pip install cookiecutter pytest pre-commit
}


# run linting, formatting, and other static code quality tools
function lint {
    pre-commit run --all-files
}

# same as `lint` but with any special considerations for CI
function lint:ci {
    # We skip no-commit-to-branch since that blocks commits to `main`.
    # All merged PRs are commits to `main` so this must be disabled.
    SKIP=no-commit-to-branch pre-commit run --all-files
}

# execute tests that are not marked as `slow`
function test:quick {
    run-tests -m "not slow" ${@:-"$THIS_DIR/tests/"}
}


# (example) ./run.sh test tests/test_states_info.py::test__slow_add
function run-tests {
    python -m pytest ${@:-"$THIS_DIR/tests/"}
}
# install core and development Python dependencies into the currently activated venv
function generate-project {
    cookiecutter ./ \
        --output-dir "$THIS_DIR/sample/"

    cd "$THIS_DIR/sample"
    cd $(ls)
    git init
    git add --all
    git branch -M main
    git commit -m "feat: generate project from cookiecutter template"
}




# remove all files generated by tests, builds, or operating this codebase
function clean {
    rm -rf dist build coverage.xml test-reports sample/  tests/cookiecutter*json
    find . \
      -type d \
      \( \
        -name "*cache*" \
        -o -name "*.dist-info" \
        -o -name "*.egg-info" \
        -o -name "*htmlcov" \
      \) \
      -not -path "*env/*" \
      -exec rm -r {} + || true

    find . \
      -type f \
      -name "*.pyc" \
      -not -path "*env/*" \
      -exec rm {} +
}

# export the contents of .env as environment variables
function try-load-dotenv {
    if [ ! -f "$THIS_DIR/.env" ]; then
        echo "no .env file found"
        return 1
    fi

    while read -r line; do
        export "$line"
    done < <(grep -v '^#' "$THIS_DIR/.env" | grep -v '^$')
}

# args: 
#   REPO_NAME - name of the repository
#   GITHUB_USERNAME - github username
#   IS_PUBLIC - whether the repository is public, (default: false)
function create-repo-if-not-exists {

    local IS_PUBLIC=${IS_PUBLIC:-false}
    
    # check if the repository already exists, if it does return
    echo "Checking if repository $GITHUB_USERNAME/$REPO_NAME exists..."
    gh repo view "$GITHUB_USERNAME/$REPO_NAME" > /dev/null \
        && echo "repo exists, exiting..." && return 0

    echo "Repository $GITHUB_USERNAME/$REPO_NAME does not exist, creating it..."
    if [[ "$IS_PUBLIC" == "true" ]]; then
        PUBLIC_OR_PRIVATE="--public"
    else
        PUBLIC_OR_PRIVATE="--private"
    fi
    gh repo create "$GITHUB_USERNAME/$REPO_NAME" $PUBLIC_OR_PRIVATE --confirm

    push-initial-readme-to-repo
    
}

# args: 
#   REPO_NAME - name of the repository
#   GITHUB_USERNAME - github username
function push-initial-readme-to-repo {
    gh repo clone "$GITHUB_USERNAME/$REPO_NAME"
    cd "$REPO_NAME"
    echo "# $REPO_NAME" > "README.md"
    git branch -M main || true
    git add --all
    git commit -m "feat: initialize repository"
    git push origin main
}

function configure-repo {
    echo "..."
}

# args:
#   REPO_NAME - name of the repository
#   GITHUB_USERNAME - github username
function open-pr-with-generated-project {

    rm -rf "$REPO_NAME" ./outdir
    install

    # clone the repository
    gh repo clone "$GITHUB_USERNAME/$REPO_NAME"


    # delete repository contents
    mv "$REPO_NAME/.git" "./$REPO_NAME.git.bak"
    rm -rf "$REPO_NAME"
    mkdir "$REPO_NAME"
    mv "./$REPO_NAME.git.bak" "$REPO_NAME/.git"

    # generate the project into the repository folder
    OUTDIR="./outdir/"
    CONFIG_FILE_PATH="./$REPO_NAME.yaml"
    cat <<EOF > "$CONFIG_FILE_PATH"
default_context:
  repo_name: "$REPO_NAME"
EOF

    cookiecutter ./ \
        --output-dir "$OUTDIR" \
        --no-input \
        --config-file $CONFIG_FILE_PATH
    
    rm "$CONFIG_FILE_PATH"

    # stage the generated files into new feature branch
    mv "$REPO_NAME/.git" "$OUTDIR/$REPO_NAME/.git"
    cd "$OUTDIR/$REPO_NAME"
    git checkout -b "feat/populating-from-template"
    git add --all

    # apply formatting and linting autofixes to generated files
    lint:ci || true # run linting and formatting, but ignore errors

    # re-stage the files modified by pre-commit
    git add --all


    # commit the changes and push them to the remote feature branch
    git commit -m "feat: populate repository from cookiecutter template"
    git push origin "feat/populating-from-template"


    # open a PR from the feature branch to main
    gh pr create \
        --title "feat: populate repository from cookiecutter template" \
        --body "This PR populates the repository with the initial project structure and files generated from the cookiecutter template." \
        --base main \
        --head "feat/populating-from-template" \
        --repo "$GITHUB_USERNAME/$REPO_NAME"
}

# print all functions in this file
function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-help}
